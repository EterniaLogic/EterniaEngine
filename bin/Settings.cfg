// EterniaEngine Compacted Settings File
// This file will be used for the default settings of a Game or Program and is encrypted into the final product.
// The values here are the set defaults.
// Changes made in-game will be saved to the encrypted file.

// This settings file will be copied into the program upon game compilation


// All of these settings are modifyable in the engine.

[[[[[General]]]]]

// Game ID for Steam
SteamAPI_ID=-1

// Steam User auth, DRM
SteamAuth=false
SteamAuth_TestDRM=false

// Achievements!
SteamAchievements=false

// Valve Anti-cheat for MMOs / multiplayer games
SteamVAC=false



// Intro graphic for the engine/Loading
EngineIntroGraphic=true



[Audio]
// The global music volume
MusicVolume=40
// The global object volume. This includes direct sources, such as monsters or falling blocks.
ObjectVolume=50
// The global ambient volume. This usually includes leaves blowing, or environmental sounds.
AmbientVolume=20


[Rendering]
// Vsync forces the engine to keep the same FPS rate as the monitor to prevent waste of resources
vSync=true
// Set the Engine's FPS directly. vSync Must be disabled.
SetFPS=60


[Logging]
// Logging rendering/Models will slow down all 2d/3d systems, but gives some useful debug output
//  ONLY use if you are debugging these. (AsyncLogger)
LoggingEnabled=true

LogRendering=false
LogModels=true
LogGui=true
LogNet=true
LogPhysics=true
LogShaders=true

// Internal (Built-in)
RenderLog=log/render.log
EventLog=log/event.log
GuiLog=log/gui.log
NetLog=log/network.log
PhysicsLog=log/physics.log
ShaderLog=log/shaders.log

// External, Your code.
LogScripting=true
ScriptLog=log/script.log



//---------------------------------------------------------------------------------------------------------------------------------------------------//
[[[[[FPS/TPS Rates]]]]]
// Players will notice any discrepancies in FPS. Make sure that these are all values above 20.
//  Physics is different, because it can spawn another thread to handle single large tasks.


// 2D/3D graphics rendering.Change this based on lower-level computers.
RenderFPS=60
// Animation based on character manipulation at 120fps (Double for more accurate timing)
AnimationFPS=120

// Backend Rendering is for PIP (does not run if ServerOnly)
// PIP = Picture in Picture, this includes mirrors, Displays/Cameras, ect.
BackendRenderingFPS=40

// Changing the FPS rates here does not increase "Time".
//  Time can be changed by your scripts/C++.
// FPS here means whenever available, execute a sound/network/script/entity, ect.
AI_TPS=60
CompressionTPS=250
EntityTPS=100
EventTPS=250
LoadingTPS=200
NetTPS=60
PhysicsTPS=60
ScriptTPS=100
SoundTPS=20

UpdateTPS=250


//---------------------------------------------------------------------------------------------------------------------------------------------------//

[[[[[Display]]]]]
Fullscreen=false
Width=1920
Height=1000
Antialiasing=4
DepthBits=8

//---------------------------------------------------------------------------------------------------------------------------------------------------//

[[[[[Servers]]]]]
// Server terminal will only start, no game. Same as -server in commandline.
// This will also prevent loading textures and calculate the vectors using OpenCL
// TCPPort is used if ServerOnly.
ServerOnly=false
TCPPort=9584

// Decreases the likelihood of multiple players being shoved into a round-robin lag fest.
ThreadPerPlayer=true



[GameClient Server UPNP]
// Otherwise, if not ServerOnly, UPNP port defined here
UPNPPort=23010

// Enables a player/user that is not registered with this game to join your server.
EnableUnregistered=false

//---------------------------------------------------------------------------------------------------------------------------------------------------//

// Scripting can make or break a game. This engine allows for Java/JS/C#/Python/Lua scripting.
//  Auto thread pool or 1-128 enables both players and servers to run a ludicrous amount of scripts all at once.

// Note:
//  Java/C#/Python cannot be "Ticked". They will act as running programs.
// JS/Lua will be ticked at a specified rate.

[[[[[Scripting]]]]]
Script_UseThreadPool=true
Script_ThreadPool=auto

Script_TickRate=20



//---------------------------------------------------------------------------------------------------------------------------------------------------//

[[[[[Internals]]]]]
[Physics]
// Decreases the number of threads for physics allowing for multiple objects being computed at the same time.
PhysicsThrottling=false

// Enables/Disables Physics processing (Some games may not process physics at all)
PhysicsEnabled=true


[Event Processing]
// Event Processing is used to manage basic events, such as mouse move
// Enables/Disables Event Processing
EventsEnabled=true
// Application Events allow a designer to run custom application-specific events through the event system. This usally includes script-based events.
ApplicationEvents=true
